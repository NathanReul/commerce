{"version":3,"file":"CommerceProductIndex.js","mappings":"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","sources":["webpack:///./CommerceProductIndex.js"],"sourcesContent":["/** global: Craft */\n/** global: Garnish */\n/**\n * Product index class\n */\nCraft.Commerce.ProductIndex = Craft.BaseElementIndex.extend({\n  editableProductTypes: null,\n  $newProductBtnProductType: null,\n  $newProductBtn: null,\n\n  init: function (elementType, $container, settings) {\n    this.on('selectSource', $.proxy(this, 'updateButton'));\n    this.on('selectSite', $.proxy(this, 'updateButton'));\n    this.base(elementType, $container, settings);\n  },\n\n  afterInit: function () {\n    // Find which of the visible productTypes the user has permission to create new products in\n    this.editableProductTypes = [];\n\n    for (var i = 0; i < Craft.Commerce.editableProductTypes.length; i++) {\n      var productType = Craft.Commerce.editableProductTypes[i];\n\n      if (this.getSourceByKey('productType:' + productType.id)) {\n        this.editableProductTypes.push(productType);\n      }\n    }\n\n    this.base();\n  },\n\n  getDefaultSourceKey: function () {\n    // Did they request a specific product productType in the URL?\n    if (\n      this.settings.context === 'index' &&\n      typeof defaultProductTypeHandle !== 'undefined'\n    ) {\n      for (var i = 0; i < this.$sources.length; i++) {\n        var $source = $(this.$sources[i]);\n\n        if ($source.data('handle') === defaultProductTypeHandle) {\n          return $source.data('key');\n        }\n      }\n    }\n\n    return this.base();\n  },\n\n  updateButton: function () {\n    if (!this.$source) {\n      return;\n    }\n\n    // Get the handle of the selected source\n    var selectedSourceHandle = this.$source.data('handle');\n\n    var i, href, label;\n\n    // Update the New Product button\n    // ---------------------------------------------------------------------\n\n    if (this.editableProductTypes.length) {\n      // Remove the old button, if there is one\n      if (this.$newProductBtnProductType) {\n        this.$newProductBtnProductType.remove();\n      }\n\n      // Determine if they are viewing a productType that they have permission to create products in\n      var selectedProductType;\n\n      if (selectedSourceHandle) {\n        for (i = 0; i < this.editableProductTypes.length; i++) {\n          if (this.editableProductTypes[i].handle === selectedSourceHandle) {\n            selectedProductType = this.editableProductTypes[i];\n            break;\n          }\n        }\n      }\n\n      this.$newProductBtnProductType = $('<div class=\"btngroup submit\"/>');\n      var $menuBtn;\n\n      // If they are, show a primary \"New product\" button, and a dropdown of the other productTypes (if any).\n      // Otherwise only show a menu button\n      if (selectedProductType) {\n        href = this._getProductTypeTriggerHref(selectedProductType);\n        label =\n          this.settings.context === 'index'\n            ? Craft.t('commerce', 'New product')\n            : Craft.t('commerce', 'New {productType} product', {\n                productType: selectedProductType.name,\n              });\n        this.$newProductBtn = $(\n          '<a class=\"btn submit add icon\" ' +\n            href +\n            '>' +\n            Craft.escapeHtml(label) +\n            '</a>'\n        ).appendTo(this.$newProductBtnProductType);\n\n        if (this.settings.context !== 'index') {\n          this.addListener(this.$newProductBtn, 'click', function (ev) {\n            this._openCreateProductModal(\n              ev.currentTarget.getAttribute('data-id')\n            );\n          });\n        }\n\n        if (this.editableProductTypes.length > 1) {\n          $menuBtn = $('<div class=\"btn submit menubtn\"></div>').appendTo(\n            this.$newProductBtnProductType\n          );\n        }\n      } else {\n        $menuBtn = $('<div class=\"btn submit add icon menubtn\" />');\n        $menuBtn.text(Craft.t('commerce', 'New product'));\n        $menuBtn.appendTo(this.$newProductBtnProductType);\n        this.$newProductBtn = $menuBtn;\n      }\n\n      if ($menuBtn) {\n        var menuHtml = '<div class=\"menu\"><ul>';\n\n        for (i = 0; i < this.editableProductTypes.length; i++) {\n          var productType = this.editableProductTypes[i];\n\n          if (\n            this.settings.context === 'index' ||\n            productType !== selectedProductType\n          ) {\n            href = this._getProductTypeTriggerHref(productType);\n            label =\n              this.settings.context === 'index'\n                ? productType.name\n                : Craft.t('commerce', 'New {productType} product', {\n                    productType: productType.name,\n                  });\n            menuHtml +=\n              '<li><a ' + href + '\">' + Craft.escapeHtml(label) + '</a></li>';\n          }\n        }\n\n        menuHtml += '</ul></div>';\n\n        $(menuHtml).appendTo(this.$newProductBtnProductType);\n        var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n        if (this.settings.context !== 'index') {\n          menuBtn.on(\n            'optionSelect',\n            $.proxy(function (ev) {\n              this._openCreateProductModal(ev.option.getAttribute('data-id'));\n            }, this)\n          );\n        }\n      }\n\n      this.addButton(this.$newProductBtnProductType);\n    }\n\n    // Update the URL if we're on the Categories index\n    // ---------------------------------------------------------------------\n\n    if (this.settings.context === 'index' && typeof history !== 'undefined') {\n      var uri = 'commerce/products';\n\n      if (selectedSourceHandle) {\n        uri += '/' + selectedSourceHandle;\n      }\n\n      history.replaceState({}, '', Craft.getUrl(uri));\n    }\n  },\n\n  _getProductTypeTriggerHref: function (productType) {\n    if (this.settings.context === 'index') {\n      var uri = 'commerce/products/' + productType.handle + '/new';\n      if (this.siteId && this.siteId != Craft.primarySiteId) {\n        for (var i = 0; i < Craft.sites.length; i++) {\n          if (Craft.sites[i].id == this.siteId) {\n            uri += '/' + Craft.sites[i].handle;\n          }\n        }\n      }\n      return 'href=\"' + Craft.getUrl(uri) + '\"';\n    } else {\n      return 'data-id=\"' + productType.id + '\"';\n    }\n  },\n\n  _openCreateProductModal: function (productTypeId) {\n    if (this.$newProductBtn.hasClass('loading')) {\n      return;\n    }\n\n    // Find the productType\n    var productType;\n\n    for (var i = 0; i < this.editableProductTypes.length; i++) {\n      if (this.editableProductTypes[i].id == productTypeId) {\n        productType = this.editableProductTypes[i];\n        break;\n      }\n    }\n\n    if (!productType) {\n      return;\n    }\n\n    this.$newProductBtn.addClass('inactive');\n    var newProductBtnText = this.$newProductBtn.text();\n    this.$newProductBtn.text(\n      Craft.t('commerce', 'New {productType} product', {\n        productType: productType.name,\n      })\n    );\n\n    Craft.createElementEditor(this.elementType, {\n      hudTrigger: this.$newProductBtnProductType,\n      elementType: 'craft\\\\elements\\\\Product',\n      siteId: this.siteId,\n      attributes: {\n        productTypeId: productTypeId,\n      },\n      onBeginLoading: $.proxy(function () {\n        this.$newProductBtn.addClass('loading');\n      }, this),\n      onEndLoading: $.proxy(function () {\n        this.$newProductBtn.removeClass('loading');\n      }, this),\n      onHideHud: $.proxy(function () {\n        this.$newProductBtn.removeClass('inactive').text(newProductBtnText);\n      }, this),\n      onSaveElement: $.proxy(function (response) {\n        // Make sure the right productType is selected\n        var productTypeSourceKey = 'productType:' + productTypeId;\n\n        if (this.sourceKey !== productTypeSourceKey) {\n          this.selectSourceByKey(productTypeSourceKey);\n        }\n\n        this.selectElementAfterUpdate(response.id);\n        this.updateElements();\n      }, this),\n    });\n  },\n});\n\n// Register it!\nCraft.registerElementIndexClass(\n  'craft\\\\commerce\\\\elements\\\\Product',\n  Craft.Commerce.ProductIndex\n);\n"],"names":["Craft","Commerce","ProductIndex","BaseElementIndex","extend","editableProductTypes","$newProductBtnProductType","$newProductBtn","init","elementType","$container","settings","this","on","$","proxy","base","afterInit","i","length","productType","getSourceByKey","id","push","getDefaultSourceKey","context","defaultProductTypeHandle","$sources","$source","data","updateButton","href","label","selectedSourceHandle","selectedProductType","$menuBtn","remove","handle","_getProductTypeTriggerHref","t","name","escapeHtml","appendTo","addListener","ev","_openCreateProductModal","currentTarget","getAttribute","text","menuHtml","menuBtn","Garnish","MenuBtn","option","addButton","history","uri","replaceState","getUrl","siteId","primarySiteId","sites","productTypeId","hasClass","addClass","newProductBtnText","createElementEditor","hudTrigger","attributes","onBeginLoading","onEndLoading","removeClass","onHideHud","onSaveElement","response","productTypeSourceKey","sourceKey","selectSourceByKey","selectElementAfterUpdate","updateElements","registerElementIndexClass"],"sourceRoot":""}